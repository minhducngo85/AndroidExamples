Fragments:
Fragments allow you to divide your activities into fully encapsulated reusable components, each with its own life cycle and UI.
The primary advantage of fragments is the ease to create dynamic and flexible UI, which can be adapted to a range of screens - 
from small screen smartphone to a tablet.

The picture below presents the Fragment's lifecycle:


Fragment manager:

FragmentManager fragmentManager = getFragmentManager();

Using Fragment Transaction:

Fragment transaction can be used to add, remove and replace Fragment at the runtime.

FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
// Add, remove, and/or replace Fragments.
// Specify animations.
// Add to back stack if required.
fragmentTransaction.commit();

Adding, Removing, and Replacing Fragments

Adding:
FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
fragmentTransaction.add(R.id.ui_container, new MyListFragment());
fragmentTransaction.commit();

Removing:
FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
Fragment fragment = fragmentManager.findFragmentById(R.id.details_fragment);
fragmentTransaction.remove(fragment);
fragmentTransaction.commit();

Replacing:
FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
fragmentTransaction.replace(R.id.details_fragment,new DetailFragment(selected_index));
fragmentTransaction.commit();
Populating Dynamic Activity Layouts with Fragments
To remove a Fragment container in a given orientation layout, simply mark its visibility attribute as gone in your layout defi nition, as shown in Listing 4-9.




Fragment and Back Stack:

Activity stacks allows you to navigate back to the previous screen using back button.

To add the Fragment Transaction to the back stack, call addToBackStack on a Fragment Transaction before calling commit.


Animating Fragment Transactions

The default transaction animations are passing in one of the FragmentTransaction.TRANSIT_FRAGMENT_* constants.

	transaction.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);

You can also customize the animation using the by setCustomAnimations method like:

	fragmentTransaction.setCustomAnimations(R.animator.slide_in_left,
R.animator.slide_out_right);

Fragments Without User Interfaces

In most circumstances, Fragments are used to encapsulate modular components of the UI; however,you can also create a Fragment without a UI to provide background behavior that persists across Activity restarts. The following snippet shows the skeleton code for a Fragment without UI. 
To add this Fragment to your Activity, create a new Fragment Transaction, specifying a tag to use to identify it. Because the Fragment has no UI, it should not be associated with a container View and generally shouldn’t be added to the back stack.

FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
fragmentTransaction.add(workerFragment, MY_FRAGMENT_TAG);
fragmentTransaction.commit();

Use the findFragmentByTag from the Fragment Manager to fi nd a reference to it later.

MyFragment myFragment =
(MyFragment)fragmentManager.findFragmentByTag(MY_FRAGMENT_TAG);


Android Fragment Classes

1) DialogFragment — A Fragment that you can use to display a floating Dialog over the parent Activity. 
2) ListFragment — A wrapper class for Fragments that feature a ListView bound to a data source as the primary UI metaphor.
3) WebViewFragment — A wrapper class that encapsulates a WebView within a Fragment.
